// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserType {
  CLIENT
  PROFESSIONAL
  COMPANY
}

enum ServicePriceType {
  FIXED
  HOURLY
}

enum ServiceMode {
  AT_LOCATION // Atendimento no local próprio do profissional
  AT_DOMICILE // Atendimento a domicílio do cliente
  BOTH
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum OrganizationRole {
  OWNER // Dono da organização (salão/empresa)
  ADMIN // Administrador (gerente)
  MEMBER // Membro/Profissional da equipe
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum AdminRole {
  SUPER_ADMIN // Acesso total à plataforma
  ADMIN // Gestão de usuários e moderação
  MODERATOR // Apenas moderação de conteúdo
  SUPPORT // Apenas suporte a usuários
  ANALYST // Apenas visualização de métricas
}

// ========================================
// ENTIDADES / MODELS
// ========================================

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String?
  name             String
  phone            String?
  userType         UserType @default(CLIENT)
  isEmailVerified  Boolean  @default(false)
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Campos de perfil estendidos (opcionais, para clientes e profissionais)
  photoUrl          String? // Foto de perfil
  bio               String? // Bio/descrição (max 500 chars)
  defaultAddress    String? // Endereço padrão para atendimentos a domicílio
  city              String? // Cidade do usuário
  notificationPrefs Json? // Preferências de notificação (email, sms, push)

  // Relações específicas por tipo de usuário
  clientProfile     ClientProfile?
  professionalProfile ProfessionalProfile?
  companyProfile    CompanyProfile?

  // Relações existentes (mantidas para compatibilidade)
  professionalProfileLegacy     ProfessionalProfileLegacy?
  clientAppointments      Appointment[]        @relation("ClientAppointments")
  profAppointments        Appointment[]        @relation("ProfessionalAppointments")
  reviews                 Review[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  organizationMemberships OrganizationMember[]
  sentInvites             OrganizationInvite[] @relation("InviteSender")

  // Company relations (apenas para UserType: COMPANY)
  companyEmployees          CompanyEmployee[]            @relation("CompanyEmployees")
  companyServices           CompanyService[]             @relation("CompanyServices")
  clientCompanyAppointments CompanyEmployeeAppointment[] @relation("ClientCompanyAppointments")
  companyEmployeeReviews    CompanyEmployeeReview[]

  // Better Auth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// ========================================
// NOVOS PERFIS ESPECÍFICOS POR TIPO DE USUÁRIO
// ========================================

model ClientProfile {
  userId            String   @id
  cpf              String   @unique
  addresses        Json     // Array de endereços
  paymentMethods   Json?    // Métodos de pagamento
  favoriteServices Json?    // Serviços favoritos
  preferences      Json?    // Preferências do cliente
  
  // Relações
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("ClientAppointments")
  reviews      Review[]

  @@map("client_profiles")
}

model ProfessionalProfile {
  userId            String      @id
  cpf              String?     // CPF se pessoa física
  cnpj             String?     // CNPJ se MEI
  address          String
  city             String
  serviceMode      ServiceMode
  workingHours     Json        // Horários de atendimento
  specialties      String[]    // Especialidades
  certifications   Json[]      // Certificações com comprovação
  portfolio        String[]    // Portfolio de trabalhos
  averageRating    Float       @default(0.0)
  totalRatings     Int         @default(0)
  isActive         Boolean     @default(true)
  isVerified       Boolean     @default(false)
  
  // Relações
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     Service[]
  appointments Appointment[] @relation("ProfessionalAppointments")
  reviews      Review[]

  @@map("professional_profiles")
}

model CompanyProfile {
  userId            String   @id
  cnpj              String   @unique
  address           String
  city              String
  businessHours     Json     // Horários de funcionamento
  description       String?  // Descrição da empresa
  photos            String[] // Fotos da empresa
  averageRating     Float    @default(0.0)
  totalRatings      Int      @default(0)
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  
  // Relações
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees    CompanyEmployee[]
  services     CompanyService[]
  appointments CompanyEmployeeAppointment[]
  reviews      CompanyEmployeeReview[]

  @@map("company_profiles")
}

model CompanyEmployee {
  id              String   @id @default(cuid())
  companyId       String
  name            String
  email           String?
  phone           String?
  position        String
  specialties     String[]
  isActive        Boolean  @default(true)
  workingHours    Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relações
  company     CompanyProfile              @relation(fields: [companyId], references: [userId], onDelete: Cascade)
  appointments CompanyEmployeeAppointment[]
  reviews     CompanyEmployeeReview[]

  @@map("company_employees")
}

// ========================================
// SISTEMA DE SERVIÇOS DIFERENCIADO
// ========================================

model Service {
  id              String           @id @default(cuid())
  professionalId  String
  categoryId      String
  name            String
  description     String?
  price           Decimal
  priceType       ServicePriceType
  duration        Int              // Duração em minutos
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relações
  professional User      @relation(fields: [professionalId], references: [id])
  category     Category
  appointments Appointment[]

  @@map("services")
}

model CompanyService {
  id              String           @id @default(cuid())
  companyId       String
  categoryId      String
  name            String
  description     String?
  price           Decimal
  priceType       ServicePriceType
  duration        Int
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relações
  company     CompanyProfile              @relation(fields: [companyId], references: [userId])
  category    Category
  appointments CompanyEmployeeAppointment[]

  @@map("company_services")
}

// ========================================
// SISTEMA DE AGENDAMENTOS UNIFICADO
// ========================================

model Appointment {
  id              String            @id @default(cuid())
  clientId        String
  professionalId   String
  serviceId        String
  scheduledDate   DateTime
  duration        Int               // Duração em minutos
  status          AppointmentStatus
  notes           String?
  totalPrice      Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relações
  client      User      @relation("ClientAppointments", fields: [clientId], references: [id])
  professional User     @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  service     Service
  review      Review?

  @@map("appointments")
}

model CompanyEmployeeAppointment {
  id              String            @id @default(cuid())
  clientId        String
  employeeId      String
  serviceId       String
  scheduledDate   DateTime
  duration        Int
  status          AppointmentStatus
  notes           String?
  totalPrice      Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relações
  client      User      @relation("ClientCompanyAppointments", fields: [clientId], references: [id])
  employee    CompanyEmployee @relation(fields: [employeeId], references: [id])
  service     CompanyService
  review      CompanyEmployeeReview?

  @@map("company_employee_appointments")
}

// ========================================
// SISTEMA DE AVALIAÇÕES
// ========================================

model Review {
  id              String   @id @default(cuid())
  clientId        String
  professionalId   String
  appointmentId   String   @unique
  rating          Int      // 1-5
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relações
  client      User      @relation(fields: [clientId], references: [id])
  professional User     @relation(fields: [professionalId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("reviews")
}

model CompanyEmployeeReview {
  id              String   @id @default(cuid())
  clientId        String
  employeeId      String
  appointmentId   String   @unique
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relações
  client      User      @relation(fields: [clientId], references: [id])
  employee    CompanyEmployee @relation(fields: [employeeId], references: [id])
  appointment CompanyEmployeeAppointment @relation(fields: [appointmentId], references: [id])

  @@map("company_employee_reviews")
}

// ========================================
// MODELOS EXISTENTES (MANTIDOS PARA COMPATIBILIDADE)
// ========================================

model ProfessionalProfileLegacy {
  userId            String      @id
  bio               String?
  city              String
  address           String?
  serviceMode       ServiceMode
  averageRating     Float       @default(0.0)
  totalRatings      Int         @default(0)
  photoUrl          String?
  portfolioImages   String[]    @default([])
  workingHours      Json?
  yearsOfExperience Int?
  specialties       String[]    @default([])
  certifications    String[]    @default([])
  languages         String[]    @default([])
  isActive          Boolean     @default(true)
  isVerified        Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relações
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services ServiceLegacy[]

  @@map("professional_profiles_legacy")
}

model ServiceLegacy {
  id              String           @id @default(cuid())
  professionalId  String
  categoryId      String
  name            String
  description     String?
  price           Decimal
  priceType       ServicePriceType
  duration        Int
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relações
  professional User      @relation(fields: [professionalId], references: [id])
  category     Category
  appointments AppointmentLegacy[]

  @@map("services_legacy")
}

model AppointmentLegacy {
  id              String            @id @default(cuid())
  clientId        String
  professionalId   String
  serviceId        String
  scheduledDate   DateTime
  duration        Int
  status          AppointmentStatus
  notes           String?
  totalPrice      Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relações
  client      User      @relation("ClientAppointmentsLegacy", fields: [clientId], references: [id])
  professional User     @relation("ProfessionalAppointmentsLegacy", fields: [professionalId], references: [id])
  service     ServiceLegacy

  @@map("appointments_legacy")
}

// ========================================
// OUTROS MODELOS EXISTENTES
// ========================================

model Category {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  services        Service[]
  companyServices CompanyService[]
  servicesLegacy  ServiceLegacy[]

  @@map("categories")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  owner   User                @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId String
  members OrganizationMember[]
  invites OrganizationInvite[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole
  joinedAt       DateTime         @default(now())

  // Relações
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model OrganizationInvite {
  id             String        @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole
  status         InviteStatus  @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relações
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId    String

  @@unique([organizationId, email])
  @@map("organization_invites")
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  role      AdminRole
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relações
  actions AdminAction[]

  @@map("admins")
}

model AdminAction {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  details   Json?
  createdAt DateTime @default(now())

  // Relações
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

// ========================================
// BETTER AUTH MODELS
// ========================================

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  accountId    String    @map("account_id")
  providerId   String    @map("provider_id")
  accessToken  String?   @map("access_token")
  refreshToken String?   @map("refresh_token")
  idToken      String?   @map("id_token")
  expiresAt    DateTime? @map("expires_at")
  password     String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, value])
  @@map("verifications")
}
