// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserType {
  CLIENT
  PROFESSIONAL
  COMPANY
}

enum ServicePriceType {
  FIXED
  HOURLY
}

enum ServiceMode {
  AT_LOCATION // Atendimento no local próprio do profissional
  AT_DOMICILE // Atendimento a domicílio do cliente
  BOTH
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum OrganizationRole {
  OWNER // Dono da organização (salão/empresa)
  ADMIN // Administrador (gerente)
  MEMBER // Membro/Profissional da equipe
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum AdminRole {
  SUPER_ADMIN // Acesso total à plataforma
  ADMIN // Gestão de usuários e moderação
  MODERATOR // Apenas moderação de conteúdo
  SUPPORT // Apenas suporte a usuários
  ANALYST // Apenas visualização de métricas
}

// ========================================
// ENTIDADES / MODELS
// ========================================

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String?
  name             String
  phone            String?
  userType         UserType @default(CLIENT) // Default temporário (será atualizado no callback)
  isEmailVerified  Boolean  @default(false)
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Campos de perfil estendidos (opcionais, para clientes e profissionais)
  photoUrl          String? // Foto de perfil
  bio               String? // Bio/descrição (max 500 chars)
  defaultAddress    String? // Endereço padrão para atendimentos a domicílio
  city              String? // Cidade do usuário
  notificationPrefs Json? // Preferências de notificação (email, sms, push)

  // Relações
  professionalProfile     ProfessionalProfile? // 1:1, opcional (apenas para UserType: PROFESSIONAL)
  clientAppointments      Appointment[]        @relation("ClientAppointments")
  profAppointments        Appointment[]        @relation("ProfessionalAppointments")
  reviews                 Review[]
  ownedOrganizations      Organization[]       @relation("OrganizationOwner")
  organizationMemberships OrganizationMember[]
  sentInvites             OrganizationInvite[] @relation("InviteSender")

  // Company relations (apenas para UserType: COMPANY)
  companyEmployees          CompanyEmployee[]            @relation("CompanyEmployees")
  companyServices           CompanyService[]             @relation("CompanyServices")
  clientCompanyAppointments CompanyEmployeeAppointment[] @relation("ClientCompanyAppointments")
  companyEmployeeReviews    CompanyEmployeeReview[]

  // Better Auth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// ========================================
// BETTER AUTH MODELS
// ========================================

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  accountId    String    @map("account_id")
  providerId   String    @map("provider_id")
  accessToken  String?   @map("access_token")
  refreshToken String?   @map("refresh_token")
  idToken      String?   @map("id_token")
  expiresAt    DateTime? @map("expires_at")
  password     String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, value])
  @@map("verifications")
}

model ProfessionalProfile {
  userId            String      @id
  bio               String?
  city              String
  address           String?
  serviceMode       ServiceMode // AT_LOCATION, AT_DOMICILE, BOTH
  averageRating     Float       @default(0.0)
  totalRatings      Int         @default(0)
  photoUrl          String?
  portfolioImages   String[]    @default([]) // URLs de imagens do portfólio
  workingHours      Json? // Horários de trabalho por dia da semana
  yearsOfExperience Int? // Anos de experiência
  specialties       String[]    @default([]) // Especialidades/habilidades
  certifications    String[]    @default([]) // Certificações
  languages         String[]    @default([]) // Idiomas falados
  isActive          Boolean     @default(true) // Perfil ativo/inativo
  isVerified        Boolean     @default(false) // Perfil verificado pela plataforma
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relações
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]

  @@map("professional_profiles")
}

model Category {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  services        Service[]
  companyServices CompanyService[]

  @@map("categories")
}

model Service {
  id              String           @id @default(cuid())
  professionalId  String
  categoryId      String
  name            String
  description     String?
  price           Decimal          @db.Money
  priceType       ServicePriceType
  durationMinutes Int // NOVO CAMPO: Duração do Serviço em Minutos
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relações
  professional ProfessionalProfile @relation(fields: [professionalId], references: [userId], onDelete: Cascade)
  category     Category            @relation(fields: [categoryId], references: [id])
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id             String            @id @default(cuid())
  clientId       String
  professionalId String
  serviceId      String
  scheduledDate  DateTime
  status         AppointmentStatus @default(PENDING)
  locationType   ServiceMode // NOVO CAMPO: LOCAL_PROPRIO ou DOMICILIO (Tipo de ServiceMode)
  clientAddress  String? // Endereço de atendimento se for a domicílio
  clientNotes    String?
  isReviewed     Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relações
  client       User    @relation("ClientAppointments", fields: [clientId], references: [id])
  professional User    @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  service      Service @relation(fields: [serviceId], references: [id])
  review       Review? // 1:1 (um agendamento pode ter uma review)

  @@index([professionalId, scheduledDate]) // Índice para checagem rápida de agendamentos
  @@map("appointments")
}

model Review {
  id             String   @id @default(cuid())
  appointmentId  String   @unique // 1:1, única por agendamento
  reviewerId     String
  professionalId String
  rating         Int // Será validado na aplicação: rating > 0 AND rating <= 5
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relações
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  reviewer    User        @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

// ========================================
// ORGANIZAÇÕES (Salões, Clínicas, Empresas)
// ========================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  ownerId     String
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  owner   User                 @relation("OrganizationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members OrganizationMember[]
  invites OrganizationInvite[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relações
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId]) // Um usuário só pode ter uma role por organização
  @@index([userId])
  @@map("organization_members")
}

model OrganizationInvite {
  id             String           @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole
  invitedBy      String
  status         InviteStatus     @default(PENDING)
  expiresAt      DateTime // Convite expira em 7 dias
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relações
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("InviteSender", fields: [invitedBy], references: [id])

  @@unique([organizationId, email]) // Não permitir convites duplicados
  @@index([email])
  @@map("organization_invites")
}

// ========================================
// ADMIN MODELS
// ========================================

model Admin {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  role         AdminRole @default(MODERATOR)
  permissions  Json? // Permissões granulares personalizadas
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relações
  actions AdminAction[]

  @@index([email])
  @@index([role])
  @@map("admins")
}

model AdminAction {
  id         String   @id @default(cuid())
  adminId    String
  action     String // Ex: "USER_SUSPENDED", "REVIEW_DELETED", "SERVICE_APPROVED"
  entityType String // Ex: "User", "Review", "Service", "ProfessionalProfile"
  entityId   String // ID da entidade afetada
  details    Json? // Detalhes adicionais da ação (motivo, valores anteriores, etc)
  ipAddress  String? // IP de onde a ação foi executada
  userAgent  String? // User agent do navegador
  createdAt  DateTime @default(now())

  // Relações
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("admin_actions")
}

// ========================================
// COMPANY EMPLOYEES (Funcionários da Empresa)
// ========================================

model CompanyEmployee {
  id          String   @id @default(cuid())
  companyId   String // ID do usuário do tipo COMPANY
  name        String
  email       String?
  phone       String?
  position    String? // Cargo/função (ex: "Cabeleireira", "Manicure")
  specialties String[] @default([]) // Especialidades do funcionário
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  company      User                         @relation("CompanyEmployees", fields: [companyId], references: [id], onDelete: Cascade)
  appointments CompanyEmployeeAppointment[]

  @@index([companyId])
  @@index([email])
  @@map("company_employees")
}

model CompanyEmployeeAppointment {
  id            String            @id @default(cuid())
  employeeId    String
  clientId      String
  serviceId     String
  scheduledDate DateTime
  status        AppointmentStatus @default(PENDING)
  locationType  ServiceMode
  clientAddress String?
  clientNotes   String?
  isReviewed    Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relações
  employee CompanyEmployee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  client   User                   @relation("ClientCompanyAppointments", fields: [clientId], references: [id])
  service  CompanyService         @relation(fields: [serviceId], references: [id])
  review   CompanyEmployeeReview?

  @@index([employeeId, scheduledDate])
  @@map("company_employee_appointments")
}

model CompanyService {
  id              String           @id @default(cuid())
  companyId       String
  categoryId      String
  name            String
  description     String?
  price           Decimal          @db.Money
  priceType       ServicePriceType
  durationMinutes Int
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relações
  company      User                         @relation("CompanyServices", fields: [companyId], references: [id], onDelete: Cascade)
  category     Category                     @relation(fields: [categoryId], references: [id])
  appointments CompanyEmployeeAppointment[]

  @@index([companyId])
  @@map("company_services")
}

model CompanyEmployeeReview {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  reviewerId    String
  employeeId    String
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  appointment CompanyEmployeeAppointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  reviewer    User                       @relation(fields: [reviewerId], references: [id])

  @@map("company_employee_reviews")
}
